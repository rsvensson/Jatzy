/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jatzy;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

/**
 *
 * @author robsve
 */
public class JatzyFrame extends javax.swing.JFrame {
    private int players; // Number of players
    private int currentPlayer;
    private int rolls; // How many rolls the current player has rolled
    private Player[] player = new Player[3];
    private Dice[] die = new Dice[5];
    

    /**
     * Creates new form YatzyFrame
     */
    public JatzyFrame() {
        initComponents();
        
        // initialize the dice and players
        for (int i = 0; i < 5; i++) {
            die[i] = new Dice(i+1); // Set successive values from 1 to 5
        }
        
        for (int i = 0; i < 3; i++) {
            player[i] = new Player(players+1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblScores = new javax.swing.JTable();
        tBtnDie1 = new javax.swing.JToggleButton();
        tBtnDie2 = new javax.swing.JToggleButton();
        tBtnDie3 = new javax.swing.JToggleButton();
        tBtnDie4 = new javax.swing.JToggleButton();
        tBtnDie5 = new javax.swing.JToggleButton();
        btnRollDice = new javax.swing.JButton();
        btnNewGame = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        tblScores.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        tblScores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Ones", null, null, null},
                {"Twos", null, null, null},
                {"Threes", null, null, null},
                {"Fours", null, null, null},
                {"Fives", null, null, null},
                {"Sixes", null, null, null},
                {"Sum", null, null, null},
                {"Bonus", null, null, null},
                {"One pair", null, null, null},
                {"Two pairs", null, null, null},
                {"Three of a kind", null, null, null},
                {"Four of a kind", null, null, null},
                {"Full house", null, null, null},
                {"Small straight", null, null, null},
                {"Large straight", null, null, null},
                {"YAHTZEE", null, null, null},
                {"Chance", null, null, null},
                {"Total", null, null, null}
            },
            new String [] {
                "", "Player 1", "Player 2", "Player 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblScores.setEnabled(false);
        tblScores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblScoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblScores);

        tBtnDie1.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        tBtnDie1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jatzy/icons/1.png"))); // NOI18N
        tBtnDie1.setDoubleBuffered(true);
        tBtnDie1.setEnabled(false);
        tBtnDie1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tBtnDie1ActionPerformed(evt);
            }
        });

        tBtnDie2.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        tBtnDie2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jatzy/icons/2.png"))); // NOI18N
        tBtnDie2.setDoubleBuffered(true);
        tBtnDie2.setEnabled(false);
        tBtnDie2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tBtnDie2ActionPerformed(evt);
            }
        });

        tBtnDie3.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        tBtnDie3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jatzy/icons/3.png"))); // NOI18N
        tBtnDie3.setDoubleBuffered(true);
        tBtnDie3.setEnabled(false);
        tBtnDie3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tBtnDie3ActionPerformed(evt);
            }
        });

        tBtnDie4.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        tBtnDie4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jatzy/icons/4.png"))); // NOI18N
        tBtnDie4.setDoubleBuffered(true);
        tBtnDie4.setEnabled(false);
        tBtnDie4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tBtnDie4ActionPerformed(evt);
            }
        });

        tBtnDie5.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        tBtnDie5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jatzy/icons/5.png"))); // NOI18N
        tBtnDie5.setDoubleBuffered(true);
        tBtnDie5.setEnabled(false);
        tBtnDie5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tBtnDie5ActionPerformed(evt);
            }
        });

        btnRollDice.setText("Roll dice");
        btnRollDice.setEnabled(false);
        btnRollDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRollDiceActionPerformed(evt);
            }
        });

        btnNewGame.setText("New game");
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });

        txaOutput.setColumns(20);
        txaOutput.setRows(5);
        jScrollPane2.setViewportView(txaOutput);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRollDice, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tBtnDie1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tBtnDie2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tBtnDie3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tBtnDie4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tBtnDie5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(40, 40, 40)
                .addComponent(btnNewGame)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewGame)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRollDice, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tBtnDie1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tBtnDie2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tBtnDie3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tBtnDie4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tBtnDie5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sorts an int array in increasing order using
     * an optimized insertion sort algorithm
     * https://en.wikipedia.org/wiki/Insertion_sort#Algorithm_for_insertion_sort
     * @param A Array to sort
     */
    private void iSort(int[] A) {
        if (A.length < 2) return;
        
        for (int i = 1, temp; i < A.length; i++) {
            temp = A[i];
            int j = i - 1;
            while (j >= 0 && A[j] > temp) {
                A[j+1] = A[j];
                j--;
            }
            A[j+1] = temp;
        }
    }
    
    /**
     * Toggles the die buttons between enabled and disabled
     * @param b - true or false (enabled or disabled)
     */
    private void toggleDieEnabled(boolean b) {
        tBtnDie1.setEnabled(b); 
        tBtnDie2.setEnabled(b); 
        tBtnDie3.setEnabled(b); 
        tBtnDie4.setEnabled(b); 
        tBtnDie5.setEnabled(b); 
    }
    
    /**
     * Sets the dice buttons to be unselected
     * and sets the dice roll state to true
     */
    private void unsetDieSelected() {
        tBtnDie1.setSelected(false);
        tBtnDie2.setSelected(false);
        tBtnDie3.setSelected(false);
        tBtnDie4.setSelected(false);
        tBtnDie5.setSelected(false);
        
        for (int i = 0; i < 5; i++)
            die[i].setRoll(true);
    }
    
    /**
     * Returns the proper die icon based on the value sent to it and whether
     * or not the die has been selected.
     * @param value - the value of the die
     * @param selected - selection state
     * @return - the die icon
     */
    private ImageIcon setDieIcon(int value, boolean selected) {
        // Create and initialize a sane standard image
        ImageIcon image = new ImageIcon(getClass().getResource("/yatzy/icons/1.png"));
        
        switch (value) {
            case 1:
                if (selected)
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/1_selected.png"));
                break;
            case 2:
                if (selected)
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/2_selected.png"));
                else
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/2.png"));
                break;
            case 3:
                if (selected)
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/3_selected.png"));
                else
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/3.png"));
                break;
            case 4:
                if (selected)
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/4_selected.png"));
                else
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/4.png"));
                break;
            case 5:
                if (selected)
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/5_selected.png"));
                else
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/5.png"));
                break;
            case 6:
                if (selected)
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/6_selected.png"));
                else
                    image = new ImageIcon(getClass().getResource("/yatzy/icons/6.png"));
                break;
        }
        
        return image;
    }
    
    /**
     * Updates the table with the players scores
     * @param p - the player number
     */
    private void setPlayerScores(int p) {
        for (int i = 0; i < 18; i++) {
            // Only update cell if row has been used
            if (player[p].isUsed(i))
                tblScores.setValueAt(player[p].getScore(i), i, p+1);
        }
    }
    
    /**
     * Checks each row for each player to see if they have all been used
     * If they have, return true to signal a game over.
     * @return 
     */
    private boolean endCondition() {
        boolean end = true;
        
        for (int i = 0; i < players; i++) {
            for (int j = 0; j < 18; j++) {
                if (!player[i].isUsed(j)) {
                    end = false;
                    break;
                }
            }
            if (!end)
                break;
        }
        
        return end;
    }
    
    /**
     * Calculates the score based on which row is sent to it
     * @param row
     * @return - The calculated score
     */
    private int calculateScore(int row) {
        int score = 0, count = 0;
        
        // Save values of the dice to an array
        int[] diceValues = new int[5];
        for (int i = 0; i < 5; i++)
            diceValues[i] = die[i].getValue();
        
        switch (row) {
            case 0: // Ones
                for (int i = 0; i < 5; i++) {
                    if (diceValues[i] == 1)
                        score += diceValues[i];
                }
                break;
                
            case 1: // Twos
                for (int i = 0; i < 5; i++) {
                    if (diceValues[i] == 2)
                        score += diceValues[i];
                }
                break;
                
            case 2: // Threes
                for (int i = 0; i < 5; i++) {
                    if (diceValues[i] == 3)
                        score += diceValues[i];
                }
                break;
                
            case 3: // Fours
                for (int i = 0; i < 5; i++) {
                    if (diceValues[i] == 4)
                        score += diceValues[i];
                }
                break;
                
            case 4: // Fives
                for (int i = 0; i < 5; i++) {
                    if (diceValues[i] == 5)
                        score += diceValues[i];
                }
                break;
                
            case 5: // Sixes
                for (int i = 0; i < 5; i++) {
                    if (diceValues[i] == 6)
                        score += diceValues[i];
                }
                break;
                
            case 8: /* 1 Pair
                * Start checking for pairs from 6 and down
                * When "count" equals 2, we have found a pair
                */
                for (int i = 6; i > 0; i--) {
                    count = 0;
                    for (int j = 0; j < 5; j++) {
                        if (diceValues[j] == i)
                            count++;
                        if (count == 2) {
                            score = (diceValues[j] * 2);
                            break;
                        }
                    }
                    if (count == 2)
                        break;
                }
                break;
            
            case 9: /* 2 Pairs
                * Start checking for pairs from 6 and down.
                * When "count" equals 2 and does not equal "score"/2, we found a unique pair.
                * When a pair is found, "pair" is incremented. If pair equals 2 at the end
                * we know we have two pairs. If not, set the score to 0.
                */ 
                int pair = 0;
                for (int i = 6; i > 0; i--) {
                    count = 0;
                    for (int j = 0; j < 5; j++) {
                        if (diceValues[j] == i && diceValues[j] != score/2)
                            count++;
                        if (count == 2) {
                            score += (diceValues[j] * 2);
                            pair++;
                            break;
                        }
                    }
                }
                // Make sure we have two pairs
                if (pair != 2)
                    score = 0;
                break;
                
            case 10: /* Three of a kind
                * Start checking for matches from 6 and down
                * When "count" equals 3, we have found three of a kind
                */
                for (int i = 6; i > 0; i--) {
                    count = 0;
                    for (int j = 0; j < 5; j++) {
                        if (diceValues[j] == i)
                            count++;
                        if (count == 3) {
                            score = (diceValues[j] * 3);
                            break;
                        }
                    }
                    if (count == 3)
                        break;
                }
                break;
            
            case 11: /*Four of a kind
                * Start checking for matches from 6 and down
                * When "count" equals 4, we have found four of a kind
                */
                for (int i = 6; i > 0; i--) {
                    count = 0;
                    for (int j = 0; j < 5; j++) {
                        if (diceValues[j] == i)
                            count++;
                        if (count == 4) {
                            score = (diceValues[j] * 4);
                            break;
                        }
                    }
                    if (count == 4)
                        break;
                }
                break;
            
            case 12: /* Full house
                * First check for three of a kind as usual, with an added boolean
                * for confirming a found match.
                */
                boolean foundThree = false;
                boolean foundPair = false;
                for (int i = 6; i > 0; i--) {
                    count = 0;
                    for (int j = 0; j < 5; j++) {
                        if (diceValues[j] == i)
                            count++;
                        if (count == 3) {
                            score = (diceValues[j] * 3);
                            foundThree = true;
                            break;
                        }
                    }
                    if (count == 3)
                        break;
                }
                
                /* Now check for the pair, making sure to only count them if
                * three of a kind was found and the value of the die is not the same
                * as for the three of a kind ones. If found set foundPair to true.
                */
                if (foundThree) {
                    for (int i = 6; i > 0; i--) {
                        count = 0;
                        for (int j = 0; j < 5; j++) {
                            if (diceValues[j] == i)
                                count++;
                            if (count == 2 && (score/3) != diceValues[j]) {
                                score += (diceValues[j] * 2);
                                foundPair = true;
                                break;
                            }
                        }
                        if (count == 2)
                            break;
                    }
                }
                
                // Make sure we found a pair in addition to three of a kind
                if (!foundPair)
                    score = 0;
                
                break;
                
            case 13: /* Small straight
                * Sort the diceValues array and check for successive numbers
                * from 1 to 5. If true, we have a small straight
                */
                iSort(diceValues);
                if (diceValues[0] == 1) {
                    count = 1;
                    for (int i = 1; i < 5; i++) {
                        if (diceValues[i] == i+1)
                            count++;
                    }
                    
                    if (count == 5)
                        score = 15;
                }
                break;
            
            case 14: /* Large straight
                * Sort the diceValues array and check for successive numbers
                * from 2 to 6. If true, we have a small straight
                */
                iSort(diceValues);
                if (diceValues[0] == 2) {
                    count = 1;
                    for (int i = 1; i < 5; i++) {
                        if (diceValues[i] == i+2)
                            count++;
                    }
                    
                    if (count == 5)
                        score = 20;
                }
                break;
                
            case 15: /* Yatzy
                * Start checking for matches from 6 and down
                * When "count" equals 5, we have a yatzy
                */
                for (int i = 6; i > 0; i--) {
                    count = 0;
                    for (int j = 0; j < 5; j++) {
                        if (diceValues[j] == i)
                            count++;
                        if (count == 5) {
                            score = 50;
                            break;
                        }
                    }
                    if (count == 5)
                        break;
                }
                break;
                
            case 16: /* Chance
                * Simply add the values of each dice together
                */
                for (int i = 0; i < 5; i++) {
                    score += diceValues[i];
                }
                break;
        }
        
        return score;
    }
    
    /**
     * Logic for rolling the dice
     * @param evt 
     */
    private void btnRollDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRollDiceActionPerformed
        if (rolls < 3) {
            // Enable dice buttons
            if (!tBtnDie1.isEnabled())
                toggleDieEnabled(true);
            
            // Randomize dice
            for (int i = 0; i < 5; i++) {
                if (die[i].doRoll()) { // Check if die should be re-rolled
                    die[i].setValue((int) (1 + Math.random() * 6));
                }
            }
        
            // Update dice buttons
            tBtnDie1.setIcon(setDieIcon(die[0].getValue(), !die[0].doRoll()));
            tBtnDie2.setIcon(setDieIcon(die[1].getValue(), !die[1].doRoll()));
            tBtnDie3.setIcon(setDieIcon(die[2].getValue(), !die[2].doRoll()));
            tBtnDie4.setIcon(setDieIcon(die[3].getValue(), !die[3].doRoll()));
            tBtnDie5.setIcon(setDieIcon(die[4].getValue(), !die[4].doRoll()));
            
            // Increment rolls
            rolls++;
            
            // Output how many rolls are left
            String rollsLeft = String.valueOf((3 - rolls));
            rollsLeft += (rolls == 2) ? " roll " : " rolls ";
            rollsLeft += "left";
            txaOutput.append("\n" + rollsLeft);
            
            // Disable roll button after 3 rolls
            if (rolls == 3) btnRollDice.setEnabled(false);
        }
    }//GEN-LAST:event_btnRollDiceActionPerformed

    // tBtnDie1 - tBtnDie5
    // Sets roll state to false when toggled so we keep the value when re-rolling
    // Also switches the icon between the selected and non-selected one
    private void tBtnDie1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tBtnDie1ActionPerformed
        if (die[0].doRoll()) {
            die[0].setRoll(false);
        } else {
            die[0].setRoll(true);
        }
        tBtnDie1.setIcon(setDieIcon(die[0].getValue(), !die[0].doRoll()));
    }//GEN-LAST:event_tBtnDie1ActionPerformed

    private void tBtnDie2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tBtnDie2ActionPerformed
        if (die[1].doRoll()) {
            die[1].setRoll(false);
        } else {
            die[1].setRoll(true);
        }
        tBtnDie2.setIcon(setDieIcon(die[1].getValue(), !die[1].doRoll()));
    }//GEN-LAST:event_tBtnDie2ActionPerformed

    private void tBtnDie3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tBtnDie3ActionPerformed
        if (die[2].doRoll()) {
            die[2].setRoll(false);
        } else {
            die[2].setRoll(true);
        }
        tBtnDie3.setIcon(setDieIcon(die[2].getValue(), !die[2].doRoll()));
    }//GEN-LAST:event_tBtnDie3ActionPerformed

    private void tBtnDie4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tBtnDie4ActionPerformed
        if (die[3].doRoll()) {
            die[3].setRoll(false);
        } else {
            die[3].setRoll(true);
        }
        tBtnDie4.setIcon(setDieIcon(die[3].getValue(), !die[3].doRoll()));
    }//GEN-LAST:event_tBtnDie4ActionPerformed

    private void tBtnDie5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tBtnDie5ActionPerformed
        if (die[4].doRoll()) {
            die[4].setRoll(false);
        } else {
            die[4].setRoll(true);
        }
        tBtnDie5.setIcon(setDieIcon(die[4].getValue(), !die[4].doRoll()));
    }//GEN-LAST:event_tBtnDie5ActionPerformed

    /**
     * Sets up a new game by asking for number of players
     * and resetting a bunch of crap
     * @param evt 
     */
    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed
        // Create dialog window with player options
        String[] options = {"1", "2", "3"};
        String p = (String) JOptionPane.showInputDialog(null,
                "How Many Players?",
                "New game",
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        
        // Only do this if player didn't press cancel
        if (p != null && !p.isEmpty()) {
            // Reset table
            for (int i = 0; i < 18; i++) {
                for (int j = 1; j < 4; j++) {
                    tblScores.setValueAt("", i, j);
                }
            }
            
            // Reset text area
            txaOutput.setText("");
            
            // Reset players
            for (int i = 0; i < 3; i++) {
                player[i].reset();
            }
        
            // Reset variables and buttons
            rolls = 0;
            currentPlayer = 0;
            btnRollDice.setEnabled(true);
            toggleDieEnabled(false);
            unsetDieSelected();
            
            // Set up new players and text area output
            players = Integer.valueOf(p);
            for (int i = 0; i < players; i++) {
                player[i].setNum(i);
                setPlayerScores(i);
            }
            txaOutput.setText("\n\nCurrent player is: Player " + (currentPlayer+1));
        }
    }//GEN-LAST:event_btnNewGameActionPerformed

    /**
     * Updates the score at the row the player clicks, and switches player
     * @param evt 
     */
    private void tblScoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblScoresMouseClicked
        if (tBtnDie1.isEnabled()) { // Check that the die buttons are enabled
            // Get the row from the mouse position
            int row = tblScores.rowAtPoint(evt.getPoint());
        
            // Update the score at the position unless clicking on "Sum", "Bonus" and "Total"
            if (row >= 0 && row != 6 && row != 7 && row < 17) {
                
                // Also check that the player hasn't already used the row
                if (!player[currentPlayer].isUsed(row)) {
                    
                    // Update the score for the player and set the row to used
                    player[currentPlayer].setScore(calculateScore(row), row);
                    player[currentPlayer].setUsed(true, row);
                    
                    // Output how many points were added
                    if (row == 15 && player[currentPlayer].getScore(row) == 50)
                        txaOutput.append("\nYatzy!!");
                    txaOutput.append("\nPlayer " + (currentPlayer+1) +
                            " adds " + player[currentPlayer].getScore(row) + " points.");
                
                    // Calculate sum
                    int sum = 0;
                    if (row >= 0 && row <= 5) {
                        for (int i = 0; i <= 5; i++)
                            sum += player[currentPlayer].getScore(i);
                     player[currentPlayer].setScore(sum, 6);
                    }
                
                    // Give 50 bonus points if sum is 63 or more
                    if (sum >= 63 && player[currentPlayer].getScore(7) == 0) {
                        player[currentPlayer].setScore(50, 7);
                        txaOutput.append("\nPlayer " + (currentPlayer+1) + 
                                " gets a 50 point bonus!");
                    }
                
                    // Calculate total
                    sum = 0;
                    for (int i = 0; i < 17; i++) {
                        if (i != 6)
                            sum += player[currentPlayer].getScore(i);
                    }
                    player[currentPlayer].setScore(sum, 17);
                
                    // Update the score table
                    setPlayerScores(currentPlayer);
            
                    // Switch player
                    if (currentPlayer == players - 1)
                        currentPlayer = 0;
                    else
                        currentPlayer++;

                    // Reset variables and buttons
                    rolls = 0;
                    btnRollDice.setEnabled(true);
                    toggleDieEnabled(false);
                    unsetDieSelected();
                    
                    // Check if the game should end and determine the winner
                    if (endCondition()) {
                        btnRollDice.setEnabled(false);
                        
                        if (players > 1) {
                            int winningPlayer = 0;
                            int highestScore = player[0].getScore(17);
                            
                            // Determine highest score and winning player
                            for (int i = 1; i < players; i++)
                                if (player[i].getScore(17) > highestScore) {
                                    highestScore = player[i].getScore(17);
                                    winningPlayer = i;
                                }
                        
                            txaOutput.append("\nGame over!\nWinning player is Player " +
                                    (winningPlayer+1) + " with a total of " + highestScore + " points.");
                            
                        } else { // If only one player
                            txaOutput.append("\nGame over!\nTotal score is " + player[0].getScore(17) + " points.");
                        }
                        
                    } else {                    
                        // Set up text area for next player
                        txaOutput.append("\nCurrent player is: Player " + (currentPlayer+1));
                    }
                    
                } else { // If the player had already used the selected row
                    txaOutput.append("\nPlayer " + (currentPlayer+1) + " has already used that row.");
                }
            }
        }
    }//GEN-LAST:event_tblScoresMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JatzyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JatzyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JatzyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JatzyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JatzyFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewGame;
    private javax.swing.JButton btnRollDice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton tBtnDie1;
    private javax.swing.JToggleButton tBtnDie2;
    private javax.swing.JToggleButton tBtnDie3;
    private javax.swing.JToggleButton tBtnDie4;
    private javax.swing.JToggleButton tBtnDie5;
    private javax.swing.JTable tblScores;
    private javax.swing.JTextArea txaOutput;
    // End of variables declaration//GEN-END:variables
}
